#Exp 4

#Step 1: Prepare a dataset with 4 classes. For each class take at least three samples.
#Step 2: Decide how many decision boundaries are required to classify this dataset. (Take such a dataset with 4 different quadrants)
#Step 3: Construct the Neural network/Perceptron network on your notebook.
#Step 4: Plot the dataset.

#Part 1: Intuitively decide the weight matrix according to your chosen dataset/decision boundary
        #Calculate bias value

#Part 2: Randomly select weight matrix and bias value
        #Use perceptron learning rule to train the weights so that it can classify your chosen dataset
        #Plot all decision boundary and data points

#Can take 3d diagrams or can make use of 3d data for more useful visualization of model
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import Perceptron
from sklearn.preprocessing import LabelEncoder

# Step 1: Prepare dataset (4 classes in 4 quadrants)
X = np.array([
    [2, 2], [3, 1], [1.5, 2.5],        # Class A
    [-2, 2], [-1, 3], [-2.5, 1.5],     # Class B
    [-2, -2], [-1, -3], [-2.5, -1.5],  # Class C
    [2, -2], [1, -3], [3, -1]          # Class D
])
y = np.array(['A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C', 'D', 'D', 'D'])

# Encode labels numerically
encoder = LabelEncoder()
y_encoded = encoder.fit_transform(y)

# Step 2: Plot dataset
plt.figure(figsize=(8, 6))
for label in np.unique(y):
    plt.scatter(X[y == label][:, 0], X[y == label][:, 1], label=label)
plt.title("4-Class Dataset (Manual Quadrants)")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.legend()
plt.grid(True)
plt.show()

# Part 2: Train Perceptron with random weights
model = Perceptron(max_iter=1000, eta0=0.1, random_state=42)
model.fit(X, y_encoded)

# Plot decision boundaries
x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
xx, yy = np.meshgrid(np.linspace(x_min, x_max, 200),
                     np.linspace(y_min, y_max, 200))
Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

plt.figure(figsize=(8, 6))
plt.contourf(xx, yy, Z, alpha=0.3, cmap='Pastel1')
for label in np.unique(y):
    plt.scatter(X[y == label][:, 0], X[y == label][:, 1], label=label)
plt.title("Decision Boundaries after Training")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.legend()
plt.grid(True)
plt.show()
